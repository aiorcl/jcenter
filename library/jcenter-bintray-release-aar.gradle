apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

/*bintray {
    user = 'smiletiger'
    key = '643447416017853431825d9393ffad41d106b48d'

    *//*configurations = ['deployables']*//* //When uploading configuration files
    // - OR -
    *//*publications = ['mavenStuff']*//* //When uploading Maven-based publication files
    // - AND/OR -
    *//*filesSpec { //When uploading any arbitrary files ('filesSpec' is a standard Gradle CopySpec)
        from 'arbitrary-files'
        into 'standalone_files/level1'
        rename '(.+)\\.(.+)', '$1-suffix.$2'
    }*//*
    dryRun = false //[Default: false] Whether to run this as dry-run, without deploying
    publish = true //[Default: false] Whether version should be auto published after an upload
    override = false //[Default: false] Whether to override version artifacts already published
    //Package configuration. The plugin will use the repo and name properties to check if the package already exists. In that case, there's no need to configure the other package properties (like userOrg, desc, etc).
    pkg {
        repo = 'maven'
        name = 'Googol'
        userOrg = 'googleservices'
        //An optional organization name when the repo belongs to one of the user's orgs
        desc = 'what a fantastic package indeed!'
        websiteUrl = 'www.googleservices.cn'
        issueTrackerUrl = 'https://github.com/bintray/gradle-bintray-plugin/issues'
        vcsUrl = 'https://github.com/bintray/gradle-bintray-plugin.git'
        licenses = ['Apache-2.0']
        *//*labels = ['gear', 'gore', 'gorilla']
        publicDownloadNumbers = true
        attributes= ['a': ['ay1', 'ay2'], 'b': ['bee'], c: 'cee'] //Optional package-level attributes

        githubRepo = 'bintray/gradle-bintray-plugin' //Optional Github repository
        githubReleaseNotesFile = 'README.md' //Optional Github readme file*//*

        //Optional Debian details
        *//*debian {
            distribution = 'squeeze'
            component = 'main'
            architecture = 'i386,noarch,amd64'
        }*//*
        //Optional version descriptor
        *//*version {
            name = '1.3-Final' //Bintray logical version name
            desc = //Optional - Version-specific description'
                    released  = //Optional - Date of the version release. 2 possible values: date in the format of 'yyyy-MM-dd'T'HH:mm:ss.SSSZZ' OR a java.util.Date instance
                            vcsTag = '1.3.0'
            attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin'] //Optional version-level attributes
            //Optional configuration for GPG signing
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
                passphrase = 'passphrase' //Optional. The passphrase for GPG signing'
            }
            //Optional configuration for Maven Central sync of the version
            mavenCentralSync {
                sync = true //[Default: true] Determines whether to sync the version to Maven Central.
                user = 'userToken' //OSS user token: mandatory
                password = 'paasword' //OSS user password: mandatory
                close = '1' //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
            }
        }*//*
    }
}*/

def SITE_URL = 'https://github.com/CoralXss/CommonBannerView'
def GIT_URL = 'https://github.com/CoralXss/CommonBannerView.git'

group = 'cn.googleservices'
version = android.defaultConfig.versionName

install {
    repositories {
        mavenInstaller {
            pom {
                project {
                    packaging 'aar'
                    groupId 'cn.googleservices'
                    artifactId 'Googol'
                    // version android.defaultConfig.versionName

                    /*// Add your description here
                    name 'Library'
                    description 'Android CI Library'
                    url SITE_URL

                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer {
                            id 'services'
                            name 'google'
                            email 'googol113@hotmail.com'
                        }
                    }

                    scm {
                        url SITE_URL
                        connection GIT_URL
                        developerConnection GIT_URL
                    }*/
                }
            }
        }
    }
}

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}

//TODO Load -> property.properties
final Properties properties = new Properties()
properties.load(file('property.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")
    configurations = ['archives']

    pkg {
        userOrg = 'googleservices'
        repo = 'maven'
        name = 'Googol'
        version {
            name = android.defaultConfig.versionName
            desc = 'Android CI Library'
        }
        licenses = ['Apache-2.0']
        vcsUrl = GIT_URL
        publish = true
    }
}

// 上传到 jcenter : gradle bintrayUpload